{"version":3,"file":"react-gsap.cjs.production.min.js","sources":["../src/types.ts","../src/helper.ts","../src/plugins/PlugInSvgDraw.ts","../src/Provider.tsx","../src/plugins/PlugInCount.ts","../src/Tween.tsx","../src/tools/Reveal.tsx","../src/Timeline.tsx","../src/tools/SplitText.tsx","../src/tools/Controls.tsx"],"sourcesContent":["export enum PlayState {\n  play = 'play',\n  reverse = 'reverse',\n  stop = 'stop',\n  pause = 'pause',\n}\n","import { gsap } from 'gsap';\nimport { PlayState } from './types';\n\nconst setPlayState = (\n  playState?: PlayState,\n  prevPlayState?: PlayState | null,\n  tween: any = null\n) => {\n  if (tween && playState && playState !== prevPlayState) {\n    if (playState === PlayState.play) {\n      if (prevPlayState === PlayState.pause || prevPlayState === PlayState.reverse) {\n        tween.play();\n      } else {\n        tween.restart(true);\n      }\n    } else if (playState === PlayState.reverse) {\n      if (prevPlayState === PlayState.pause || prevPlayState === PlayState.play) {\n        tween.reverse();\n      } else {\n        tween.reverse(0);\n      }\n    } else if (playState === PlayState.stop) {\n      tween.pause(0);\n    } else if (playState === PlayState.pause) {\n      tween.pause();\n    }\n  }\n};\n\nconst getTweenFunction = (targets: any, props: any): gsap.core.Tween | gsap.core.Timeline => {\n  const {\n    children,\n    wrapper,\n\n    duration = 1,\n    from,\n    to,\n\n    stagger,\n\n    progress,\n    totalProgress,\n    playState,\n    disabled,\n    onlyInvalidateTo,\n\n    onCompleteAll,\n    onCompleteAllParams,\n    onCompleteAllScope,\n    onStartAll,\n\n    position,\n    target,\n\n    ...vars\n  } = props;\n\n  let tweenFunction: gsap.core.Tween | gsap.core.Timeline;\n\n  if (from && to) {\n    tweenFunction = gsap.fromTo(targets, from, { stagger, duration, ...to, ...vars });\n  } else if (to) {\n    tweenFunction = gsap.to(targets, { stagger, duration, ...to, ...vars });\n  } else {\n    tweenFunction = gsap.from(targets, { stagger, duration, ...from, ...vars });\n  }\n\n  // if multiple tweens (stagger), wrap them in a timeline\n  // TODO: if it's already an timeline add event handlers\n  if (Array.isArray(tweenFunction)) {\n    tweenFunction.forEach(t => {\n      t.paused(false);\n    });\n    tweenFunction = gsap.timeline({\n      ...vars,\n      tweens: tweenFunction,\n      smoothChildTiming: true,\n      onComplete: onCompleteAll,\n      onCompleteParams: onCompleteAllParams,\n      onCompleteScope: onCompleteAllScope,\n      onStart: onStartAll,\n    });\n  }\n\n  // props at mount\n  if (progress) {\n    tweenFunction.progress(progress);\n  }\n  if (totalProgress) {\n    tweenFunction.totalProgress(totalProgress);\n  }\n  if (playState) {\n    setPlayState(playState, null, tweenFunction);\n  }\n\n  return tweenFunction;\n};\n\nconst callTweenFunction = (\n  tweenFunction: any,\n  functionName: string,\n  params: Array<any> | undefined = undefined,\n  returnFunction: string | undefined = undefined\n): void => {\n  if (Array.isArray(tweenFunction)) {\n    tweenFunction.forEach(tween => {\n      if (!params && returnFunction) {\n        params = [tween[returnFunction].apply(tween)];\n      }\n      tween[functionName].apply(tween, params);\n    });\n  } else {\n    if (!params && returnFunction) {\n      params = [tweenFunction[returnFunction].apply(tweenFunction)];\n    }\n    tweenFunction[functionName].apply(tweenFunction, params);\n  }\n};\n\nconst isEqual = (obj1: any, obj2: any) => {\n  // very easy equal check\n  // attention: if the order of properties are different it returns false\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n};\n\nconst refOrInnerRef = (child: any) => {\n  if (child.type.$$typeof && child.type.$$typeof.toString() === 'Symbol(react.forward_ref)') {\n    return 'ref';\n  }\n\n  // styled-components < 4\n  if (child.type.styledComponentId) {\n    return 'innerRef';\n  }\n\n  return 'ref';\n};\n\nconst nullishCoalescing = <T, R>(value: T, ifNullish: R): T | R => {\n  if (value === null || typeof value === 'undefined') {\n    return ifNullish;\n  }\n  return value;\n};\n\nexport {\n  getTweenFunction,\n  callTweenFunction,\n  setPlayState,\n  isEqual,\n  refOrInnerRef,\n  nullishCoalescing,\n};\n","import { nullishCoalescing } from '../helper';\n\nlet gsap: any;\nlet _interpolate: any;\nlet _getProp: any;\nconst _getGSAP = () =>\n  gsap || (typeof window !== 'undefined' && (gsap = window.gsap) && gsap.registerPlugin && gsap);\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nfunction getDistance(p1: DOMPoint | Point, p2: DOMPoint | Point) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCircleLength(el: SVGCircleElement) {\n  return 2 * Math.PI * parseFloat(nullishCoalescing(el.getAttribute('r'), '1'));\n}\n\nfunction getRectLength(el: SVGRectElement) {\n  return (\n    parseFloat(nullishCoalescing(el.getAttribute('width'), '1')) * 2 +\n    parseFloat(nullishCoalescing(el.getAttribute('height'), '1')) * 2\n  );\n}\n\nfunction getLineLength(el: SVGLineElement) {\n  return getDistance(\n    {\n      x: parseFloat(nullishCoalescing(el.getAttribute('x1'), '1')),\n      y: parseFloat(nullishCoalescing(el.getAttribute('y1'), '1')),\n    },\n    {\n      x: parseFloat(nullishCoalescing(el.getAttribute('x2'), '1')),\n      y: parseFloat(nullishCoalescing(el.getAttribute('y2'), '1')),\n    }\n  );\n}\n\nfunction getPolylineLength(el: SVGPolylineElement) {\n  const points = el.points;\n  let totalLength = 0;\n  let previousPos: DOMPoint | undefined = undefined;\n  for (let i = 0; i < points.numberOfItems; i++) {\n    const currentPos = points.getItem(i);\n    if (previousPos) totalLength += getDistance(previousPos, currentPos);\n    previousPos = currentPos;\n  }\n  return totalLength;\n}\n\nfunction getPolygonLength(el: SVGPolylineElement) {\n  const points = el.points;\n  return (\n    getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0))\n  );\n}\n\n// if path is splitted into multiple move commands then return longest path\nfunction getPathLength(el: SVGPathElement) {\n  if (!el.hasAttribute('d')) {\n    return el.getTotalLength();\n  }\n  const d = el.getAttribute('d');\n  const pathString = d ? d.replace(/m/gi, 'M') : null;\n\n  if (!pathString) {\n    return el.getTotalLength();\n  }\n\n  const paths = pathString\n    .split('M')\n    .filter(path => path !== '')\n    .map(path => `M${path}`);\n\n  if (paths.length === 1) {\n    return el.getTotalLength();\n  }\n\n  let maxLength = 0;\n\n  paths.forEach(path => {\n    const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    pathElement.setAttribute('d', path);\n    maxLength = Math.max(maxLength, pathElement.getTotalLength());\n  });\n\n  return maxLength;\n}\n\nfunction getTotalLength(el: any) {\n  if (el.getTotalLength) {\n    return getPathLength(el);\n  }\n  switch (el.tagName.toLowerCase()) {\n    case 'circle':\n      return getCircleLength(el);\n    case 'rect':\n      return getRectLength(el);\n    case 'line':\n      return getLineLength(el);\n    case 'polyline':\n      return getPolylineLength(el);\n    case 'polygon':\n      return getPolygonLength(el);\n    default:\n      return 0;\n  }\n}\n\nexport const SvgDrawPlugin = {\n  version: '2.0.0',\n  name: 'svgDraw',\n  register(core: any, Plugin: any, propTween: any) {\n    gsap = core;\n    _interpolate = gsap.utils.interpolate;\n    _getProp = gsap.getProperty;\n  },\n  init(target: any, value: number, _tween: any, index: number, targets: any) {\n    const length = getTotalLength(target);\n\n    let lengthParam = value;\n    let offsetParam = 0;\n\n    if (Array.isArray(value)) {\n      lengthParam = value[0];\n      if (value.length >= 2) {\n        offsetParam = value[1] * -1;\n      }\n    }\n\n    let data = this;\n    data.target = target;\n    data.strokeDashoffset = _interpolate(\n      _getProp(target, 'stroke-dashoffset'),\n      length * offsetParam\n    );\n    data.strokeDasharray = _interpolate(_getProp(target, 'stroke-dasharray'), [\n      lengthParam * length,\n      length,\n    ]);\n  },\n  render(progress: number, data: any) {\n    data.target.setAttribute('stroke-dashoffset', data.strokeDashoffset(progress));\n    data.target.setAttribute('stroke-dasharray', data.strokeDasharray(progress));\n  },\n};\n\n_getGSAP() && gsap.registerPlugin(SvgDrawPlugin);\n\nexport { SvgDrawPlugin as default };\n","import React from 'react';\n\nexport type ContextProps = {\n  registerConsumer: (consumer: any) => void;\n};\n\nexport const Context = React.createContext<ContextProps>({ registerConsumer: () => {} });\n\nabstract class Provider<T, S = {}> extends React.Component<T, S> {\n  consumers: any[];\n\n  constructor(props: T) {\n    super(props);\n    this.consumers = [];\n\n    this.registerConsumer = this.registerConsumer.bind(this);\n    this.getContextValue = this.getContextValue.bind(this);\n    this.renderWithProvider = this.renderWithProvider.bind(this);\n  }\n\n  registerConsumer(consumer: any) {\n    this.consumers.push(consumer);\n  }\n\n  getContextValue() {\n    return {\n      registerConsumer: this.registerConsumer,\n    };\n  }\n\n  renderWithProvider(output: any) {\n    return <Context.Provider value={this.getContextValue()}>{output}</Context.Provider>;\n  }\n}\n\nexport default Provider;\n","import { nullishCoalescing } from '../helper';\n\nlet gsap: any;\nlet _interpolate: any;\nlet _format: any;\nconst _getGSAP = () =>\n  gsap || (typeof window !== 'undefined' && (gsap = window.gsap) && gsap.registerPlugin && gsap);\n\ntype Prop =\n  | {\n      value: string | number;\n      format: () => (value: string | number) => number | string;\n    }\n  | number\n  | string;\n\nexport const CountPlugin = {\n  version: '1.0.0',\n  name: 'count',\n  register(core: any, Plugin: any, propTween: any) {\n    gsap = core;\n    _interpolate = gsap.utils.interpolate;\n    _format = (value: string | number) => parseInt(value.toString(), 10);\n  },\n  init(target: any, value: Prop, _tween: any, index: number, targets: any) {\n    let inputValue = value;\n    let format = _format;\n    if (typeof value === 'object') {\n      inputValue = nullishCoalescing(value.value, 0);\n      if (value.format) {\n        format = value.format;\n      }\n    }\n\n    const initialCount = parseFloat(target.innerText);\n\n    let data = this;\n    data.target = target;\n    data.count = _interpolate(initialCount, parseFloat(inputValue.toString()));\n    data.format = format;\n  },\n  render(progress: number, data: any) {\n    data.target.innerText = data.format(data.count(progress));\n  },\n};\n\n_getGSAP() && gsap.registerPlugin(CountPlugin);\n\nexport { CountPlugin as default };\n","import React, { Fragment } from 'react';\nimport { gsap } from 'gsap';\nimport { PlayState } from './types';\nimport { getTweenFunction, setPlayState, isEqual, refOrInnerRef } from './helper';\nimport { Context } from './Provider';\n\n// import { CSSPlugin } from 'gsap/dist/CSSPlugin'; // CSSPlugin not exported as ES5?\nimport SvgDrawPlugin from './plugins/PlugInSvgDraw';\nimport CountPlugin from './plugins/PlugInCount';\n\n// gsap.registerPlugin(CSSPlugin);\ngsap.registerPlugin(SvgDrawPlugin);\ngsap.registerPlugin(CountPlugin);\n\ntype StaggerFunction = (index: number, target: any, list: any) => number;\ntype StaggerFromValues = 'start' | 'center' | 'edges' | 'random' | 'end';\ntype EaseFunction = (value: number) => number;\n\nexport type Stagger =\n  | {\n      amount?: number;\n      each?: number;\n      from?: StaggerFromValues | number | [number, number];\n      grid?: [number, number] | 'auto';\n      axis?: 'x' | 'y';\n      ease?: string | EaseFunction;\n      repeat?: number;\n      yoyo?: boolean;\n      [prop: string]: any;\n    }\n  | number\n  | StaggerFunction;\n\nexport type TweenProps = {\n  /** One or multiple \"refable\" components  */\n  children?: React.ReactNode;\n  wrapper?: React.ReactElement;\n  target?: number | string;\n  position?: string | number;\n\n  from?: any;\n  to?: any;\n  stagger?: Stagger;\n\n  duration?: number;\n  progress?: number;\n  totalProgress?: number;\n  playState?: PlayState;\n\n  disabled?: boolean;\n  onlyInvalidateTo?: boolean;\n\n  [prop: string]: any;\n};\n\nclass Tween extends React.Component<TweenProps, {}> {\n  static displayName = 'Tween';\n  static contextType = Context;\n\n  tween: any;\n  targets: any[] = [];\n\n  setPlayState(playState: PlayState) {\n    const { playState: previousPlayState } = this.props;\n    setPlayState(playState, previousPlayState, this.tween);\n  }\n\n  componentDidMount() {\n    this.createTween();\n  }\n\n  componentWillUnmount() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n  }\n\n  getSnapshotBeforeUpdate() {\n    this.targets = [];\n    return null;\n  }\n\n  componentDidUpdate(prevProps: TweenProps) {\n    const {\n      children,\n      wrapper,\n\n      duration,\n      from,\n      to,\n      stagger,\n\n      progress,\n      totalProgress,\n      playState,\n      disabled,\n      onlyInvalidateTo,\n\n      onCompleteAll,\n      onCompleteAllParams,\n      onCompleteAllScope,\n      onStartAll,\n\n      position,\n      target,\n\n      ...vars\n    } = this.props;\n\n    // if children change create a new tween\n    // TODO: replace easy length check with fast equal check\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.createTween();\n    }\n\n    if (disabled) {\n      return;\n    }\n\n    // execute function calls\n    if (progress !== prevProps.progress) {\n      this.tween.progress(progress);\n    }\n    if (totalProgress !== prevProps.totalProgress) {\n      this.tween.totalProgress(totalProgress);\n    }\n    if (duration !== prevProps.duration) {\n      this.tween.duration(duration);\n    }\n    // if \"to\" props are changed: reinit and restart tween\n    if (!isEqual(to, prevProps.to)) {\n      // is Tween\n      if (!this.tween.getChildren) {\n        this.tween.vars = { ...to, ...vars };\n\n        if (onlyInvalidateTo) {\n          var progressTmp = this.tween.progress();\n          this.tween\n            .progress(0)\n            .invalidate()\n            .progress(progressTmp);\n        } else {\n          this.tween.invalidate();\n        }\n      }\n      // is Timeline\n      // TODO: not yet ready\n      else {\n        let delay = 0;\n        this.tween.getChildren(false, true, false).forEach((tween: any) => {\n          tween.vars = { ...to, ...vars, ...{ delay } };\n          tween.invalidate();\n          // delay += stagger || 0;\n        });\n      }\n\n      if (!this.tween.paused()) {\n        this.tween.restart();\n      }\n    }\n\n    setPlayState(playState, prevProps.playState, this.tween);\n  }\n\n  createTween() {\n    if (this.tween) {\n      this.tween.kill();\n    }\n\n    if (this.props.children) {\n      this.tween = getTweenFunction(this.targets, this.props);\n    } else {\n      // why this is needed?\n      this.tween = () => {};\n    }\n\n    this.context.registerConsumer(this);\n  }\n\n  getGSAP() {\n    return this.tween;\n  }\n\n  setGSAP(tween: any) {\n    this.tween = tween;\n  }\n\n  addTarget(target: any) {\n    // target is null at unmount\n    if (target !== null) {\n      this.targets.push(target);\n    }\n  }\n\n  getTargets() {\n    return this.targets;\n  }\n\n  render() {\n    let { children, wrapper } = this.props;\n\n    const output = (\n      <Fragment>\n        {React.Children.map(children, child =>\n          React.cloneElement(child as any, {\n            [refOrInnerRef(child)]: (target: any) => this.addTarget(target),\n          })\n        )}\n      </Fragment>\n    );\n\n    if (wrapper) {\n      return React.cloneElement(wrapper, [], output);\n    }\n\n    return output;\n  }\n}\n\nexport default Tween;\n","import React from 'react';\nimport { gsap } from 'gsap';\nimport { nullishCoalescing } from '../helper';\nimport Provider from '../Provider';\n\nexport type RevealProps = {\n  children: React.ReactNode;\n  trigger: React.ReactElement | null;\n  repeat: boolean;\n  root: Element | null;\n  rootMargin: string;\n  threshold: number;\n};\n\nenum EntryState {\n  unknown,\n  entered,\n  exited,\n}\n\nclass Reveal extends Provider<RevealProps> {\n  static displayName = 'Reveal';\n\n  static defaultProps = {\n    trigger: null,\n    repeat: false,\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.66,\n  };\n\n  timeline: any;\n  triggerRef: HTMLElement | null = null;\n  observer: IntersectionObserver | null = null;\n\n  init() {\n    this.createTimeline();\n    this.createIntersectionObserver();\n  }\n\n  kill() {\n    this.killTimeline();\n    this.killIntersectionObserver();\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {\n    this.kill();\n  }\n\n  componentDidUpdate(prevProps: RevealProps) {\n    const { children, trigger } = this.props;\n\n    // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.init();\n    }\n\n    if (prevProps.trigger !== trigger) {\n      this.init();\n    }\n  }\n\n  createTimeline() {\n    this.killTimeline();\n\n    // init timeline\n    this.timeline = gsap.timeline({\n      smoothChildTiming: true,\n      paused: true,\n    });\n\n    // add consumers\n    this.consumers.forEach(consumer => {\n      const { position } = consumer.props;\n      this.timeline.add(consumer.getGSAP().play(), nullishCoalescing(position, 0));\n    });\n  }\n\n  killTimeline() {\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n  }\n\n  createIntersectionObserver() {\n    let { root, rootMargin, threshold } = this.props;\n\n    const options = {\n      root,\n      rootMargin,\n      threshold: [0, threshold],\n    };\n\n    this.observer = new IntersectionObserver(this.intersectionObserverCallback, options);\n\n    // It would be better if we wouldn't need an extra wrapper.\n    // But it can be problematic for example with a fadeInLeft animation\n    // were the element is out of the viewport in the initial state.\n    // In this case there wouldn't be an intersection..\n    if (!this.triggerRef) {\n      this.consumers.forEach(consumer => {\n        consumer.getTargets().forEach((target: any) => {\n          this.observer && this.observer.observe(target);\n        });\n      });\n    } else {\n      this.observer && this.observer.observe(this.triggerRef);\n    }\n  }\n\n  killIntersectionObserver() {\n    this.unobserveAll();\n    this.observer = null;\n  }\n\n  unobserveAll() {\n    if (this.observer) {\n      if (!this.triggerRef) {\n        this.consumers.forEach(consumer => {\n          consumer.getTargets().forEach((target: any) => {\n            this.observer && this.observer.unobserve(target);\n          });\n        });\n      } else {\n        this.observer && this.observer.unobserve(this.triggerRef);\n      }\n    }\n  }\n\n  intersectionObserverCallback = (entries: any) => {\n    let { repeat, threshold } = this.props;\n    let state: EntryState = EntryState.unknown;\n\n    for (const entry of entries) {\n      if (entry.isIntersecting && entry.intersectionRatio >= threshold) {\n        this.timeline.play();\n        state = EntryState.entered;\n        break;\n      } else if (!entry.isIntersecting) {\n        state = EntryState.exited;\n        break;\n      }\n    }\n\n    if (!repeat && state === EntryState.entered) {\n      this.killIntersectionObserver();\n    } else if (repeat && state === EntryState.exited) {\n      this.timeline.pause(0);\n    }\n  };\n\n  getGSAP() {\n    return this.timeline;\n  }\n\n  render() {\n    let { children, trigger } = this.props;\n\n    let output = trigger ? (\n      <trigger.type {...trigger.props} ref={(trigger: HTMLElement) => (this.triggerRef = trigger)}>\n        {children}\n      </trigger.type>\n    ) : (\n      children\n    );\n\n    return this.renderWithProvider(output);\n  }\n}\n\nexport default Reveal;\n","import React, { Fragment, ReactNode, ReactElement, forwardRef } from 'react';\nimport { gsap } from 'gsap';\nimport { isForwardRef, isFragment } from 'react-is';\nimport { PlayState } from './types';\nimport { getTweenFunction, setPlayState, refOrInnerRef, nullishCoalescing } from './helper';\nimport Provider, { Context } from './Provider';\nimport { TweenProps } from './Tween';\n\ntype Label = {\n  label: string;\n  position: string | number;\n};\n\nexport type Targets = Map<string | number, ReactElement | ReactElement[]>;\nexport type TargetsRef = {\n  set: (key: string, target: any) => void;\n};\n\nexport type Target = ReactElement | null;\n\nexport type TimelineProps = {\n  children: ReactNode;\n  wrapper?: ReactElement;\n  target?: Target;\n  position?: string | number;\n  labels?: Label[];\n\n  duration?: number;\n  progress?: number;\n  totalProgress?: number;\n  playState?: PlayState;\n\n  [prop: string]: any;\n};\n\nclass Timeline extends Provider<TimelineProps> {\n  static displayName = 'Timeline';\n  static contextType = Context;\n\n  timeline: any;\n  targets: Targets = new Map();\n\n  constructor(props: TimelineProps) {\n    super(props);\n\n    this.setTarget = this.setTarget.bind(this);\n  }\n\n  setPlayState(playState: PlayState) {\n    const { playState: previousPlayState } = this.props;\n    setPlayState(playState, previousPlayState, this.timeline);\n  }\n\n  componentDidMount() {\n    this.createTimeline();\n  }\n\n  componentWillUnmount() {\n    this.timeline.kill();\n  }\n\n  getSnapshotBeforeUpdate() {\n    this.targets = new Map();\n    return null;\n  }\n\n  componentDidUpdate(prevProps: TimelineProps) {\n    const { children, duration, progress, totalProgress, playState } = this.props;\n\n    // if children change create a new timeline\n    // TODO: replace easy length check with fast equal check\n    // TODO: same for props.target?\n    if (React.Children.count(prevProps.children) !== React.Children.count(children)) {\n      this.createTimeline();\n    }\n\n    // execute function calls\n    if (progress !== prevProps.progress) {\n      this.timeline.progress(progress);\n    }\n    if (totalProgress !== prevProps.totalProgress) {\n      this.timeline.totalProgress(totalProgress);\n    }\n    if (duration !== prevProps.duration) {\n      this.timeline.duration(duration);\n    }\n\n    setPlayState(playState, prevProps.playState, this.timeline);\n  }\n\n  createTimeline() {\n    const {\n      children,\n      target,\n      duration,\n      progress,\n      totalProgress,\n      playState,\n      labels,\n      position,\n      ...vars\n    } = this.props;\n\n    if (this.timeline) {\n      this.timeline.kill();\n    }\n\n    // init timeline\n    this.timeline = gsap.timeline({\n      smoothChildTiming: true,\n      ...vars,\n    });\n\n    if (labels) {\n      labels.forEach(label => {\n        this.timeline.addLabel(label.label, label.position);\n      });\n    }\n\n    // add tweens or nested timelines to timeline\n    this.consumers.forEach(consumer => {\n      if (consumer.tween && !consumer.props.children) {\n        const { position, target, stagger, ...vars } = consumer.props as TweenProps;\n\n        // get target if not nullish\n        let targets = null;\n        if (target !== null && typeof target !== 'undefined') {\n          targets = this.targets.get(target);\n        }\n\n        const tween = getTweenFunction(\n          // @ts-ignore\n          nullishCoalescing(targets, Array.from(this.targets.values())),\n          {\n            stagger,\n            ...vars,\n          }\n        );\n        this.timeline.add(tween, nullishCoalescing(position, '+=0'));\n        consumer.setGSAP(tween);\n      } else {\n        const { position } = consumer.props;\n        this.timeline.add(consumer.getGSAP(), nullishCoalescing(position, '+=0'));\n      }\n    });\n\n    // props at mount\n    if (duration) {\n      this.timeline.duration(duration);\n    }\n    if (progress) {\n      this.timeline.progress(progress);\n    }\n    if (totalProgress) {\n      this.timeline.totalProgress(totalProgress);\n    }\n    if (playState) {\n      this.setPlayState(playState);\n    }\n\n    this.context.registerConsumer(this);\n  }\n\n  getGSAP() {\n    return this.timeline;\n  }\n\n  addTarget(target: any) {\n    if (target !== null) {\n      this.targets.set(this.targets.size, target);\n    }\n  }\n\n  setTarget(key: string, target: any) {\n    if (target !== null) {\n      if (this.targets.has(key)) {\n        const targets = this.targets.get(key);\n        if (Array.isArray(targets)) {\n          this.targets.set(key, [...targets, ...target]);\n          return;\n        }\n      }\n      this.targets.set(key, target);\n    }\n  }\n\n  setTargets(targets: Targets) {\n    this.targets = targets;\n  }\n\n  getTargets() {\n    return this.targets;\n  }\n\n  cloneElement(child: any) {\n    return React.cloneElement(child, {\n      // @ts-ignore\n      [refOrInnerRef(child)]: target => this.addTarget(target),\n    });\n  }\n\n  renderTarget(target?: Target): ReactNode {\n    if (!target) {\n      return null;\n    }\n\n    // if is forwardRef clone and pass targets as ref\n    if (isForwardRef(target)) {\n      return <target.type ref={{ set: this.setTarget }} />;\n    }\n\n    // else iterate the first level of children and set targets\n    return (\n      <Fragment>\n        {/* First render the target */}\n        {React.Children.map<ReactElement, ReactElement>(target, child => {\n          if (isFragment(child)) {\n            return React.Children.map(child.props.children, fragmentChild => {\n              return this.cloneElement(fragmentChild);\n            });\n          }\n          return this.cloneElement(child);\n        })}\n      </Fragment>\n    );\n  }\n\n  render() {\n    let { target, children, wrapper } = this.props;\n\n    const renderedTarget = this.renderTarget(target);\n\n    let output = (\n      <Fragment>\n        {renderedTarget}\n        {children}\n      </Fragment>\n    );\n\n    if (wrapper) {\n      output = React.cloneElement(wrapper, [], output);\n    }\n\n    return this.renderWithProvider(output);\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\n\ntype SplitWordsProps = {\n  children: React.ReactNode;\n  wrapper: React.ReactElement;\n  delimiter?: string;\n};\n\ntype SplitCharsProps = {\n  children: React.ReactNode;\n  wrapper: React.ReactElement;\n};\n\nconst escapeRegExp = (regExp: string) => {\n  var specialChars = ['$', '^', '*', '(', ')', '+', '[', ']', '{', '}', '\\\\', '|', '.', '?', '/'];\n  var regex = new RegExp('(\\\\' + specialChars.join('|\\\\') + ')', 'g');\n  return regExp.replace(regex, '\\\\$1');\n};\n\nexport const SplitWords = React.forwardRef<any, SplitWordsProps>(\n  ({ children, wrapper, delimiter = ' ' }, ref) => {\n    if (typeof children !== 'string') {\n      throw new Error('SplitWords only accepts a string as child.');\n    }\n    const words = children.split(new RegExp(`(${escapeRegExp(delimiter)})`, 'g'));\n    return (\n      <>\n        {words.map((word: string, i: number) => {\n          if (delimiter === ' ' && word === delimiter) {\n            return <React.Fragment key={i}> </React.Fragment>;\n          }\n          return React.cloneElement(wrapper, { ref, key: i }, word);\n        })}\n      </>\n    );\n  }\n);\n\nexport const SplitChars = React.forwardRef<any, SplitCharsProps>(({ children, wrapper }, ref) => {\n  if (typeof children !== 'string') {\n    throw new Error('SplitLetters only accepts a string as child.');\n  }\n  return (\n    <>\n      {children\n        .split(\n          /(?=(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))/\n        )\n        .map((char: string, i: number) => {\n          // TODO: enhance check for space\n          if (char === ' ') {\n            return <React.Fragment key={i}> </React.Fragment>;\n          }\n          return React.cloneElement(wrapper, { ref, key: i }, char);\n        })}\n    </>\n  );\n});\n\nexport const SplitLetters = React.forwardRef((props: any, ref) => {\n  console.log('Deprecation warning: Use SplitChars instead of SplitLetters');\n  return <SplitChars {...props} ref={ref} />;\n});\n","import React from 'react';\nimport { PlayState } from './../types';\nimport { setPlayState } from './../helper';\nimport Provider from '../Provider';\n\ntype ControlsProps = {\n  playState?: PlayState;\n};\n\ntype ControlsState = {\n  totalProgress: number;\n  playState?: PlayState;\n  prevPlayState?: PlayState;\n};\n\nclass Controls extends Provider<ControlsProps, ControlsState> {\n  gsap: any;\n  slider: any;\n  sliderTouched: boolean = false;\n\n  state = {\n    totalProgress: 0,\n    playState: undefined,\n    prevPlayState: undefined,\n  };\n\n  containerStyle = {\n    backgroundColor: '#f0f0f0',\n    padding: '10px 10px 0 10px',\n    marginTop: '10px',\n    position: 'relative' as 'relative',\n    zIndex: 2,\n    fontFamily: 'verdana, sans-serif',\n    fontSize: '16px',\n    border: '1px solid #ccc',\n  };\n\n  buttonContainerStyle = {\n    margin: '0',\n    display: 'flex',\n    flexWrap: 'wrap' as 'wrap',\n    justifyContent: 'space-between',\n  };\n\n  buttonStyle = {\n    border: '1px solid #999',\n    backgroundColor: '#f0f0f0',\n    padding: '5px',\n    margin: '10px 10px 10px 0',\n    cursor: 'pointer',\n  };\n\n  sliderStyle = {\n    margin: '0',\n    width: '100%',\n  };\n\n  playStateStyle = {\n    color: '#999',\n    margin: '10px 0',\n    fontSize: '14px',\n  };\n\n  componentDidMount() {\n    if (this.consumers.length) {\n      this.gsap = this.consumers[0];\n\n      const gsap = this.gsap.getGSAP();\n\n      if (gsap) {\n        gsap.eventCallback('onUpdate', this.onUpdate);\n\n        if (this.props.playState) {\n          this.setPlayState(this.props.playState);\n        } else {\n          // get child initial state\n          if (gsap.paused()) {\n            this.setPlayState(PlayState.pause);\n          } else if (gsap.reversed()) {\n            this.setPlayState(PlayState.reverse);\n          } else {\n            this.setPlayState(PlayState.play);\n          }\n        }\n\n        const totalProgress = gsap.totalProgress();\n        this.slider.value = totalProgress * 100;\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    this.onUpdate();\n  }\n\n  onUpdate = () => {\n    if (this.gsap && this.slider && !this.sliderTouched) {\n      const totalProgress = this.gsap.getGSAP().totalProgress();\n      this.slider.value = totalProgress * 100;\n    }\n  };\n\n  onChange = (event: any) => {\n    if (this.gsap && this.gsap.getGSAP()) {\n      this.gsap.getGSAP().totalProgress(event.target.value / 100);\n    }\n  };\n\n  setPlayState = (state: PlayState) => {\n    this.setState(prevState => {\n      return {\n        playState: state,\n        prevPlayState: prevState.playState,\n      };\n    });\n  };\n\n  getControls = (_totalProgress: any, playState: PlayState | undefined) => (\n    <div style={this.containerStyle}>\n      <input\n        ref={el => (this.slider = el)}\n        type=\"range\"\n        style={this.sliderStyle}\n        step=\"0.001\"\n        onChange={e => this.onChange(e)}\n        onMouseDown={() => (this.sliderTouched = true)}\n        onMouseUp={() => (this.sliderTouched = false)}\n      />\n      <div style={this.buttonContainerStyle}>\n        <div>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.play)}\n          >\n            Play\n          </button>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.reverse)}\n          >\n            Reverse\n          </button>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.pause)}\n          >\n            Pause\n          </button>\n          <button\n            type=\"button\"\n            style={this.buttonStyle}\n            onClick={() => this.setPlayState(PlayState.stop)}\n          >\n            Stop\n          </button>\n        </div>\n        <span style={this.playStateStyle}>{playState}</span>\n      </div>\n    </div>\n  );\n\n  render() {\n    const { children } = this.props;\n    const { totalProgress, playState, prevPlayState } = this.state;\n\n    if (this.gsap) {\n      setPlayState(playState, prevPlayState, this.gsap.getGSAP());\n    }\n\n    return this.renderWithProvider(\n      <div>\n        {children}\n        {this.getControls(totalProgress, playState)}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n"],"names":["PlayState","gsap","_interpolate","_getProp","setPlayState","playState","prevPlayState","tween","play","pause","reverse","restart","stop","getTweenFunction","targets","props","tweenFunction","duration","from","to","stagger","progress","totalProgress","disabled","onCompleteAll","onCompleteAllParams","onCompleteAllScope","onStartAll","position","fromTo","vars","Array","isArray","forEach","t","paused","timeline","tweens","smoothChildTiming","onComplete","onCompleteParams","onCompleteScope","onStart","refOrInnerRef","child","type","$$typeof","toString","styledComponentId","nullishCoalescing","value","ifNullish","Context","React","createContext","registerConsumer","Provider","consumers","_this","bind","getContextValue","renderWithProvider","consumer","push","this","output","Component","getDistance","p1","p2","Math","sqrt","pow","x","y","getPolylineLength","el","points","totalLength","previousPos","undefined","i","numberOfItems","currentPos","getItem","_format","SvgDrawPlugin","version","name","register","core","Plugin","propTween","utils","interpolate","getProperty","init","target","_tween","index","length","getTotalLength","hasAttribute","d","getAttribute","pathString","replace","paths","split","filter","path","map","maxLength","pathElement","document","createElementNS","setAttribute","max","getPathLength","tagName","toLowerCase","PI","parseFloat","getCircleLength","getRectLength","getLineLength","getPolygonLength","lengthParam","offsetParam","strokeDashoffset","strokeDasharray","render","data","window","registerPlugin","CountPlugin","parseInt","inputValue","format","initialCount","innerText","count","Tween","componentDidMount","createTween","componentWillUnmount","kill","getSnapshotBeforeUpdate","componentDidUpdate","prevProps","children","wrapper","onlyInvalidateTo","Children","obj2","JSON","stringify","getChildren","delay","invalidate","progressTmp","context","getGSAP","setGSAP","addTarget","getTargets","Fragment","cloneElement","_this2","EntryState","Timeline","Map","setTarget","createTimeline","labels","label","addLabel","get","values","add","set","size","key","has","setTargets","_this3","renderTarget","isForwardRef","ref","isFragment","fragmentChild","_this4","renderedTarget","Reveal","entries","repeat","threshold","state","unknown","entry","isIntersecting","intersectionRatio","entered","exited","killIntersectionObserver","createIntersectionObserver","killTimeline","trigger","observer","IntersectionObserver","intersectionObserverCallback","root","rootMargin","triggerRef","observe","unobserveAll","unobserve","_this5","SplitWords","forwardRef","delimiter","Error","regExp","regex","words","RegExp","join","word","SplitChars","char","SplitLetters","console","log","backgroundColor","padding","marginTop","zIndex","fontFamily","fontSize","border","margin","display","flexWrap","justifyContent","cursor","width","color","slider","sliderTouched","event","setState","prevState","_totalProgress","style","containerStyle","sliderStyle","step","onChange","e","onMouseDown","onMouseUp","buttonContainerStyle","buttonStyle","onClick","playStateStyle","eventCallback","onUpdate","reversed","getControls"],"mappings":"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"}