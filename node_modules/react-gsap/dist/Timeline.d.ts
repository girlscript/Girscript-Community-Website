import React, { ReactNode, ReactElement } from 'react';
import { PlayState } from './types';
import Provider from './Provider';
declare type Label = {
    label: string;
    position: string | number;
};
export declare type Targets = Map<string | number, ReactElement | ReactElement[]>;
export declare type TargetsRef = {
    set: (key: string, target: any) => void;
};
export declare type Target = ReactElement | null;
export declare type TimelineProps = {
    children: ReactNode;
    wrapper?: ReactElement;
    target?: Target;
    position?: string | number;
    labels?: Label[];
    duration?: number;
    progress?: number;
    totalProgress?: number;
    playState?: PlayState;
    [prop: string]: any;
};
declare class Timeline extends Provider<TimelineProps> {
    static displayName: string;
    static contextType: React.Context<import("./Provider").ContextProps>;
    timeline: any;
    targets: Targets;
    constructor(props: TimelineProps);
    setPlayState(playState: PlayState): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getSnapshotBeforeUpdate(): null;
    componentDidUpdate(prevProps: TimelineProps): void;
    createTimeline(): void;
    getGSAP(): any;
    addTarget(target: any): void;
    setTarget(key: string, target: any): void;
    setTargets(targets: Targets): void;
    getTargets(): Targets;
    cloneElement(child: any): React.DetailedReactHTMLElement<{
        [x: string]: (target: any) => void;
    }, HTMLElement>;
    renderTarget(target?: Target): ReactNode;
    render(): JSX.Element;
}
export default Timeline;
