import React from 'react';
import { PlayState } from './types';
declare type StaggerFunction = (index: number, target: any, list: any) => number;
declare type StaggerFromValues = 'start' | 'center' | 'edges' | 'random' | 'end';
declare type EaseFunction = (value: number) => number;
export declare type Stagger = {
    amount?: number;
    each?: number;
    from?: StaggerFromValues | number | [number, number];
    grid?: [number, number] | 'auto';
    axis?: 'x' | 'y';
    ease?: string | EaseFunction;
    repeat?: number;
    yoyo?: boolean;
    [prop: string]: any;
} | number | StaggerFunction;
export declare type TweenProps = {
    /** One or multiple "refable" components  */
    children?: React.ReactNode;
    wrapper?: React.ReactElement;
    target?: number | string;
    position?: string | number;
    from?: any;
    to?: any;
    stagger?: Stagger;
    duration?: number;
    progress?: number;
    totalProgress?: number;
    playState?: PlayState;
    disabled?: boolean;
    onlyInvalidateTo?: boolean;
    [prop: string]: any;
};
declare class Tween extends React.Component<TweenProps, {}> {
    static displayName: string;
    static contextType: React.Context<import("./Provider").ContextProps>;
    tween: any;
    targets: any[];
    setPlayState(playState: PlayState): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getSnapshotBeforeUpdate(): null;
    componentDidUpdate(prevProps: TweenProps): void;
    createTween(): void;
    getGSAP(): any;
    setGSAP(tween: any): void;
    addTarget(target: any): void;
    getTargets(): any[];
    render(): JSX.Element;
}
export default Tween;
